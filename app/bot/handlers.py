# File: app/bot/handlers.py
from aiogram import Router, types
from aiogram.filters import Command
from app.services.signal_generator import generate_signal
from app.services.portfolio_service import calculate_portfolio_value
# from app.services.onchain_service import fetch_onchain_metrics  # implement when ready
from app.core.logger import logger

router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """Welcome message and available commands."""
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Crypto Signals Bot. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/signals - –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª\n"
        "/portfolio - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"
        "/onchain - on-chain –º–µ—Ç—Ä–∏–∫–∏\n"
        "/subscribe - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(text)

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await cmd_start(message)

@router.message(Command("signals"))
async def cmd_signals(message: types.Message):
    """Generate and send a trading signal."""
    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∏–≥–Ω–∞–ª...")
    try:
        signal = await generate_signal()
        text = (
            f"üéØ –°–∏–≥–Ω–∞–ª: {signal['action']}\n"
            f"Entry: {signal['entry']}\n"
            f"Target: {signal['target']}\n"
            f"Stop-loss: {signal['stop_loss']}\n"
            f"Confidence: {signal['confidence']:.2f}"
        )
    except Exception as e:
        logger.error(f"Error generating signal: {e}")
        text = "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    await message.answer(text)

@router.message(Command("portfolio"))
async def cmd_portfolio(message: types.Message):
    """Compute and send portfolio value."""
    # TODO: replace stub with user-specific assets
    assets = []  # example: [{'symbol': 'BTC', 'amount': 0.5}]
    try:
        result = calculate_portfolio_value(assets)
        lines = [f"{a['symbol']}: {a['amount']} ({a['value_usd']:.2f} USD)" for a in result['assets']]
        lines.append(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result['total_value']:.2f} USD")
        text = "\n".join(lines) if lines else "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–æ–≤."
    except Exception as e:
        logger.error(f"Error calculating portfolio: {e}")
        text = "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è."
    await message.answer(text)

@router.message(Command("onchain"))
async def cmd_onchain(message: types.Message):
    """Fetch and send on-chain metrics."""
    await message.answer("üîÑ –ü–æ–ª—É—á–∞—é on-chain –º–µ—Ç—Ä–∏–∫–∏...")
    try:
        from app.services.onchain_service import fetch_onchain_metrics
        metrics = await fetch_onchain_metrics()
        text = (
            f"üè¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: {metrics.active_addresses}\n"
            f"üìä –ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {metrics.tx_count}"
        )
    except Exception as e:
        logger.error(f"Error fetching onchain metrics: {e}")
        text = "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å on-chain –º–µ—Ç—Ä–∏–∫–∏."
    await message.answer(text)
