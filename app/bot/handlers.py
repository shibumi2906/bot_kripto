# File: app/bot/handlers.py

from aiogram import Dispatcher, types
from aiogram.filters import Command
from app.core.db import query
from app.core.config import settings

def register_handlers(dp: Dispatcher) -> None:
    dp.message.register(cmd_start,       Command(commands=["start"]))
    dp.message.register(cmd_help,        Command(commands=["help"]))
    dp.message.register(cmd_signals,     Command(commands=["signals"]))
    dp.message.register(cmd_history,     Command(commands=["history"]))
    dp.message.register(cmd_portfolio,   Command(commands=["portfolio"]))
    dp.message.register(cmd_onchain,     Command(commands=["onchain"]))
    dp.message.register(cmd_subscribe,   Command(commands=["subscribe"]))


async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Crypto Signals Bot. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/signals   ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª\n"
        "/portfolio ‚Äî —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"
        "/onchain   ‚Äî on-chain –º–µ—Ç—Ä–∏–∫–∏ (–ø–æ –∞–∫—Ç–∏–≤—É)\n"
        "/subscribe ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/help      ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def cmd_help(message: types.Message):
    # –ø—Ä–æ—Å—Ç–æ –¥—É–±–ª–∏—Ä—É–µ–º /start
    await cmd_start(message)


async def cmd_signals(message: types.Message):
    rows = query(
        "SELECT asset, signal_type, entry, target, stop_loss, confidence, explanation, created_at "
        "FROM signals ORDER BY created_at DESC LIMIT ?",
        (5,),
    )
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")
        return
    parts = []
    for asset, action, entry, target, stop_loss, conf, expl, created in rows:
        parts.append(
            f"<b>{asset}</b> ‚Äî {action.upper()} @ {entry}\n"
            f"TP: {target}, SL: {stop_loss}\n"
            f"Conf: {conf*100:.1f}%\n"
            f"{expl}\n"
            f"<i>{created}</i>"
        )
    await message.answer("\n\n".join(parts), parse_mode="HTML")


async def cmd_history(message: types.Message):
    rows = query(
        "SELECT asset, signal_type, entry, target, stop_loss, confidence, created_at "
        "FROM signals ORDER BY created_at DESC LIMIT ?",
        (10,),
    )
    if not rows:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–∞.")
        return
    lines = [f"{r[7]} | {r[0]} {r[1].upper()} @ {r[2]} (TP {r[3]}, SL {r[4]})" for r in rows]
    await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:\n" + "\n".join(lines))


async def cmd_portfolio(message: types.Message):
    user_id = message.from_user.id
    rows = query("SELECT asset, amount FROM portfolio WHERE telegram_id = ?", (user_id,))
    if not rows:
        await message.answer("–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.")
        return
    lines = [f"{asset}: {amount}" for asset, amount in rows]
    await message.answer("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n" + "\n".join(lines))


async def cmd_onchain(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏, —á—Ç–æ–±—ã HTML-–ø–∞—Ä—Å–µ—Ä –Ω–µ —Ä—É–≥–∞–ª—Å—è
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /onchain &lt;symbol&gt;\n"
            "–ü—Ä–∏–º–µ—Ä: /onchain BTC",
            parse_mode="HTML"
        )
        return

    symbol = parts[1].upper()
    rows = query(
        "SELECT active_addresses, tx_volume FROM onchain_metrics "
        "WHERE asset = ? ORDER BY timestamp DESC LIMIT 1",
        (symbol,),
    )
    if not rows:
        await message.answer(f"–ù–µ—Ç on-chain –º–µ—Ç—Ä–∏–∫ –¥–ª—è {symbol}.")
        return

    active, volume = rows[0]
    await message.answer(
        f"üìä On-chain –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è <b>{symbol}</b>:\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {active}\n"
        f"–û–±—ä–µ–º tx (–ø–æ—Å–ª.): {volume}",
        parse_mode="HTML",
    )



async def cmd_subscribe(message: types.Message):
    user_id = message.from_user.id
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è Stripe-—Å–µ—Å—Å–∏–∏
    link = (
        f"{settings.API_URL}/payments/create-checkout-session"
        f"?user_id={user_id}&plan=basic"
    )
    await message.answer(
        f"üîë –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}\n"
        "(–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Å–∏–≥–Ω–∞–ª–∞–º)"
    )

